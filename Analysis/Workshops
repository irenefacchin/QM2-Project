***Workshop 2: Working with Data in Pandas***

To import and handle .csv files --> use Pandas

** Searching, extracting and plotting data**

#to import pandas and pylab
import pandas
import pylab
import matplotlib.pyplot as plt

# to make the plots a little wider by default
%matplotlib inline
plt.style.use('ggplot')
pylab.rcParams['figure.figsize'] = (10., 8.)

# to read a specific column
dataframename = pandas.read_csv (file_name, column_index = x)
dataframename.head()
dataframename.tail()

#to read a specific row
dataframename.loc[row_index]

#to select a range of values in rows
dataframename.loc[row_range1:row_range2]

#to extract the actual value, we need to reference the column AND the row (remember, colums are referenced by their names not their index)
dataframename [column_name].loc[row_index]

#to extract look at a few rows of data we can use a range
dataframename [column_name].loc[row_range1:row_range2]

#to plot a data frame, use the plot() method and the plt. To set the labels for title and axis
dataframename[column_name].plot()
plt.title(“Title plot”)
plt.xlabel(“X Label”)
plt.ylabel(“Y Label”)

--> look at documentation page for pandas

**Messy Data**

In .csv files, numbers are separated by commas and surrounded by quotation marks. However, there are a lot of commas within the numbers which confuses software.
Some errors can come up: may be due to blank spaces in the text file, letters where there should be numbers, characters (“,”, “-“, etc) that shouldn’t really be there. 

Cleaning data

#use the “replace” method:
clean = clean.replace(‘,’ , ‘ ’, regex = True)
clean = clean.replace(‘-‘, ‘NaN’, regex = True).astype(‘float’)
clean.head()

Extension Regex refers to “RegularExpression” which is a way to replace and clean text. 
We now have a clean dataframe. Let’s plot it.

#plot the clean dataframe:
clean.plot()
plt.title(“…”)
plt.xlabel(“…”)
plt.ylabel(“…”)



***Workshop 3: Merging and Joining Data in Python***

#to download the data
!mkdir data

#to join instructions
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import random
%matplotlib inline
plt.style.use('ggplot')
before doing this, make sure to clean the data

#merging into dataframes to add new observations
people3 = pd.concat([people1,people2])

#Clean data (I'm going to focus on one year (2012,I'm going to just look at "Both Sexes" (not focus on one gender,I'm going to get rid of a column of data (the 'Value Footnotes' column) using the drop() method.)
cities = cities[cities['Sex']=='Both Sexes']
cities = cities[cities['Year']==2012]
cities.drop('Value Footnotes', axis=1, inplace=True)

#recap joins, panda has four join methods
- Left Join: use **only** keys from **left** DataFrame. SQL: [left outer join](http://goo.gl/JICveI)
- Right Join: use **only** keys from **right** DataFrame. SQL: [right outer join](http://goo.gl/TrrHjQ)
- Outer Join: use union of **keys from both** DataFrames. SQL: [full outer join](http://goo.gl/bVRqO8)
- Inner Join: use **intersection of keys** from both DataFrames. SQL: [inner join](http://goo.gl/Cf1MF8)
